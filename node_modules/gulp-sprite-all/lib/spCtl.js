var color, fs, gutil, mkdirsSync, path, spCtl;

fs = require('fs');

path = require('path');

gutil = require('gulp-util');

color = gutil.colors;

mkdirsSync = function(dirpath, mode) {
  if (fs.existsSync(dirpath)) {
    return true;
  } else {
    if (mkdirsSync(path.dirname(dirpath), mode)) {
      fs.mkdirSync(dirpath, mode);
      return true;
    }
  }
};


/* 单个雪碧图的状态检查类库 */

spCtl = (function() {
  function spCtl(opts) {
    this.opts = opts;
    this.srcPath = this.opts.srcPath;
    this.imgOutPath = this.opts.imgOutPath;
    this.lessOutPath = this.opts.lessOutPath;
    this.spMap = path.join(this.srcPath, 'spmap.json');
    mkdirsSync(this.srcPath);
    mkdirsSync(this.imgOutPath);
    mkdirsSync(this.lessOutPath);
  }


  /**
   * 获取所有雪碧图的源目录
   */

  spCtl.prototype.getSpSrcFolders = function() {
    var _folders;
    _folders = [];
    fs.readdirSync(this.srcPath).forEach(function(file) {
      if (file.indexOf('.') === -1) {
        return _folders.push(file);
      }
    });
    return _folders;
  };


  /**
  * 获取已合成的雪碧图
   */

  spCtl.prototype.getSpPngFiles = function() {
    var _imgOutPath, _list;
    _list = [];
    _imgOutPath = this.imgOutPath;
    console.log(_imgOutPath);
    fs.readdirSync(_imgOutPath).forEach(function(v) {
      var name;
      if (v.indexOf('.png') !== -1) {
        name = v.replace('.png', '');
        return _list.push(name);
      }
    });
    return _list;
  };


  /**
  * 获取已生成的雪碧图LESS
   */

  spCtl.prototype.getSpLessFiles = function() {
    var _lessOutPath, _list;
    _list = [];
    _lessOutPath = this.lessOutPath;
    fs.readdirSync(_lessOutPath).forEach(function(v) {
      var name;
      if (v.indexOf('.less') !== -1) {
        name = v.replace('.less', '');
        return _list.push(name);
      }
    });
    return _list;
  };

  spCtl.prototype.lessIsBuild = function(folder) {
    var _spLess;
    _spLess = path.join(this.outPath, folder + ".less");
    return fs.statSync(_spLess).isFile();
  };

  spCtl.prototype.imgIsBuild = function(folder) {
    var _spImg;
    _spImg = path.join(this.outPath, folder + '.png');
    return fs.statSync(_spImg).isFile();
  };

  spCtl.prototype.getSpMap = function() {
    var e, _spriteMap;
    _spriteMap = {};
    _spriteMap = this.spMap;
    try {
      _spriteMap = JSON.parse(fs.readFileSync(_spriteMap));
    } catch (_error) {
      e = _error;
      gutil.log('rebuild spmap.json');
      fs.writeFileSync(_spriteMap, "{}", 'utf8');
    }
    return _spriteMap;
  };

  spCtl.prototype.setSpMap = function() {
    var key, _i, _len, _map, _mapStr, _spFolders, _spriteMap;
    _map = {};
    _spriteMap = this.spMap;
    _spFolders = this.getSpSrcFolders();
    for (_i = 0, _len = _spFolders.length; _i < _len; _i++) {
      key = _spFolders[_i];
      _map[key] = this.getSpSrcList(key);
    }
    _mapStr = JSON.stringify(_map, null, 2);
    fs.writeFileSync(_spriteMap, _mapStr, 'utf8');
    return gutil.log('\'' + color.cyan('spmap.json') + '\'', 'build success.');
  };

  spCtl.prototype.getSpSrcList = function(folder) {
    var _list, _pngsPath;
    _list = [];
    _pngsPath = path.join(this.srcPath, folder);
    fs.readdirSync(_pngsPath).forEach(function(file) {
      var pngFile;
      pngFile = path.join(_pngsPath, file);
      if (file.indexOf('.') !== 0 && file.indexOf('.png') !== -1 && fs.statSync(pngFile)) {
        return _list.push(file);
      }
    });
    return _list;
  };


  /**
  * 返回雪碧图的生成算法 共三个：
  * 默认 binary-tree
  * 目录名的最后包含'_y'，即为Y轴，则为top-down
  * 目录名的最后包含'_x'，即为X轴，则为left-right
   */

  spCtl.prototype.getBuildMethod = function(folder) {
    var method;
    method = (function() {
      switch (false) {
        case !/_x$/.test(folder):
          return 'left-right';
        case !/_y$/.test(folder):
          return 'top-down';
        default:
          return 'binary-tree';
      }
    })();
    return method;
  };

  return spCtl;

})();

module.exports = spCtl;
