// Generated by CoffeeScript 1.10.0
var BGURLRE, ICONHOOK, color, fs, gutil, path, spBuilder, spCtl, sprite, through2, vfs,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fs = require('fs');

path = require('path');

vfs = require('vinyl-fs');

sprite = require('gulp.spritesmith');

through2 = require('through2');

gutil = require('gulp-util');

color = gutil.colors;

spCtl = require('./spCtl');

ICONHOOK = /\/\*([\s\S]*?)\*\//;

BGURLRE = /\s*background-image:\s*url\([\s\S]*?\);/g;

spBuilder = (function(superClass) {
  extend(spBuilder, superClass);

  function spBuilder() {
    this._build = bind(this._build, this);
    return spBuilder.__super__.constructor.apply(this, arguments);
  }

  spBuilder.prototype._fixBgUrl = function(opts) {
    var name, spriteClass;
    name = opts.cssName.replace('.less', '');
    spriteClass = ".sprite-" + name + "{background-image: url('@{SpritePath}/" + opts.imgName + "');}\n";
    return through2.obj(function(file, enc, cb) {
      var con;
      con = file.contents.toString();
      con = con.replace(BGURLRE, '').replace(ICONHOOK, function(str) {
        return spriteClass;
      });
      file.contents = new Buffer(con);
      return cb(null, file);
    });
  };


  /*
   * PNGs combine to one image and build LESS demo
   */

  spBuilder.prototype._build = function(floder) {
    var _floder, _imgOutPath, _lessOutPath, _method, _spBgUrl, _srcPath, _this, opts, spData;
    _this = this;
    _floder = floder;
    _srcPath = this.srcPath;
    _imgOutPath = this.imgOutPath;
    _lessOutPath = this.lessOutPath;
    _spBgUrl = "@{SpritePath}/" + _floder + ".png";
    _method = this.getBuildMethod(_floder);
    opts = {
      algorithm: _method,
      padding: 10,
      imgName: _floder + ".png",
      cssName: _floder + ".less",
      cssFormat: 'css',
      imgPath: _spBgUrl,
      cssOpts: {
        cssSelector: function(item) {
          return ".icon-" + _floder + "-" + item.name + "()";
        }
      }
    };
    spData = vfs.src(path.join(_srcPath, _floder, '*.png')).pipe(sprite(opts));
    return new Promise(function(resolve, reject) {
      var err, error;
      try {
        return spData.img.pipe(vfs.dest(_imgOutPath)).on('end', function() {
          return spData.css.pipe(_this._fixBgUrl(opts)).pipe(vfs.dest(_lessOutPath)).on('end', function() {
            return resolve(_floder);
          });
        });
      } catch (error) {
        err = error;
        return reject(err);
      }
    });
  };

  spBuilder.prototype.outputOne = function(folder, cb) {
    var _cb, _this;
    _cb = cb || function() {};
    _this = this;
    return _this._build(folder).then(function(res) {
      _this.setSpMap();
      return _cb(res);
    })["catch"](function(err) {
      console.error(err);
      return _cb(err);
    });
  };


  /*
   * 生成全部雪碧图和雪碧图map
   */

  spBuilder.prototype.init = function(cb) {
    var _cb, _newFolders, _pList, _this, folder, i, len;
    _cb = cb || function() {};
    _this = this;
    _newFolders = _this.getSpSrcFolders();
    _pList = [];
    if (_newFolders.length > 0) {
      for (i = 0, len = _newFolders.length; i < len; i++) {
        folder = _newFolders[i];
        _pList.push(_this._build(folder));
      }
      return Promise.all(_pList).then(function(res) {
        _this.setSpMap();
        return _cb(res);
      })["catch"](function(err) {
        console.error(err);
        return _cb(err);
      });
    } else {
      return _cb(false);
    }
  };

  return spBuilder;

})(spCtl);

module.exports = spBuilder;
