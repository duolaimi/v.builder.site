fs = require('fs')
path = require('path')
vfs = require('vinyl-fs')
sprite = require('gulp.spritesmith')
through2 = require('through2')
gutil = require('gulp-util')
color = gutil.colors
spCtl = require('./spCtl')

ICONHOOK = /\/\*([\s\S]*?)\*\//
BGURLRE = /\s*background-image:\s*url\([\s\S]*?\);/g

class spBuilder extends spCtl
    _fixBgUrl:(opts)->
        name = opts.cssName.replace('.less','')
        spriteClass = ".sprite-#{name}{background-image: url('@{SpritePath}/#{opts.imgName}');}\n"
        return through2.obj (file,enc,cb)->
            con = file.contents.toString()
            con = con.replace(BGURLRE,'')
                    .replace ICONHOOK,(str)->
                        return spriteClass
            # console.log con
            file.contents = new Buffer(con)
            cb(null,file)
    ###
    # PNGs combine to one image and build LESS demo
    ###
    _build: (floder)=>
        _this = @
        _floder = floder
        _srcPath = @srcPath
        _imgOutPath = @imgOutPath
        _lessOutPath = @lessOutPath

        # 雪碧图在css中相对路径
        _spBgUrl = "@{SpritePath}/#{_floder}.png"

        # 获取雪碧图合成算法
        _method = @getBuildMethod(_floder)
        opts =
            # engine: 'pngsmith'
            algorithm: _method
            padding: 10
            imgName: "#{_floder}.png"
            cssName: "#{_floder}.less"
            cssFormat: 'css'
            imgPath: _spBgUrl
            cssOpts:
                cssSelector: (item)->
                    return ".icon-#{_floder}-#{item.name}()"

        spData = vfs.src(path.join(_srcPath, _floder, '*.png'))
                        .pipe(sprite(opts))

        return new Promise (resolve,reject)->
            try
                spData.img.pipe(vfs.dest(_imgOutPath))
                .on 'end',->
                    spData.css.pipe(_this._fixBgUrl(opts)).pipe(vfs.dest(_lessOutPath))
                    .on 'end',->
                        resolve(_floder)
            catch err
                reject(err)

    # 生成单个雪碧图
    outputOne: (folder,cb)->
        _cb = cb or ->
        _this = @
        _this._build(folder).then (res)->
            _this.setSpMap()
            _cb(res)
        .catch (err)->
            console.error(err)
            _cb(err)

    ###
    # 生成全部雪碧图和雪碧图map
    ###
    init: (cb)->
        _cb = cb or ->
        # 实例化雪碧图的构建对象
        _this = @
        # 本次构建的雪碧图队列
        _newFolders =_this.getSpSrcFolders()
        # 生成新的sp图
        _pList = []
        if _newFolders.length > 0
            # gutil.log 'Starting','\'' + color.cyan('Sprites') + '\''
            for folder in _newFolders
                _pList.push _this._build folder
            Promise.all(_pList)
                .then (res)->
                    _this.setSpMap()
                    _cb(res)
                .catch (err)->
                    console.error(err)
                    _cb(err)
        else
            _cb(false)


module.exports = spBuilder
