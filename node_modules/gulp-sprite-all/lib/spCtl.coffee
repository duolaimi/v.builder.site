fs = require('fs')
path = require('path')
gutil = require('gulp-util')
color = gutil.colors
# spriteMapData


mkdirsSync = (dirpath, mode)->
    if fs.existsSync(dirpath)
        return true
    else
        if mkdirsSync path.dirname(dirpath), mode
            fs.mkdirSync(dirpath, mode)
            return true

### 单个雪碧图的状态检查类库 ###
class spCtl
    constructor:(@opts)->
        @srcPath = @opts.srcPath
        @imgOutPath = @opts.imgOutPath
        @lessOutPath = @opts.lessOutPath
        @spMap = path.join @srcPath,'spmap.json'
        mkdirsSync(@srcPath)
        mkdirsSync(@imgOutPath)
        mkdirsSync(@lessOutPath)
    ###*
     * 获取所有雪碧图的源目录
    ###
    getSpSrcFolders: ->
        _folders = []
        fs.readdirSync(@srcPath).forEach (file)->
            _folders.push file if file.indexOf('.') is -1
        return _folders

    ###*
    * 获取已合成的雪碧图
    ###
    getSpPngFiles : ->
        _list = []
        _imgOutPath = @imgOutPath
        console.log _imgOutPath
        fs.readdirSync(_imgOutPath).forEach (v)->
            if v.indexOf('.png') != -1
                name = v.replace('.png', '')
                _list.push name
        return _list
    ###*
    * 获取已生成的雪碧图LESS
    ###
    getSpLessFiles : ->
        _list = []
        _lessOutPath = @lessOutPath
        fs.readdirSync(_lessOutPath).forEach (v)->
            if v.indexOf('.less') != -1
                name = v.replace('.less', '')
                _list.push name
        return _list

#
# ###*
#  * 雪碧图的状态检查类库
# ###
# class spCtl extends spInit

    # 检查雪碧图less是否存在
    lessIsBuild: (folder)->
        _spLess = path.join @outPath, folder + ".less"
        return fs.statSync(_spLess).isFile()

    # 检查雪碧图是否生成
    imgIsBuild: (folder)->
        _spImg = path.join(@outPath, folder + '.png')
        return fs.statSync(_spImg).isFile()

    # 获取雪碧图源目录结构的Map
    getSpMap: ->
        _spriteMap = {}
        _spriteMap = @spMap
        try
            _spriteMap = JSON.parse fs.readFileSync(_spriteMap)
        catch e
            gutil.log 'rebuild spmap.json'
            fs.writeFileSync _spriteMap, "{}", 'utf8'

        return _spriteMap

    setSpMap: ->
        _map = {}
        _spriteMap = @spMap
        _spFolders = @getSpSrcFolders()
        for key in _spFolders
            _map[key] = @getSpSrcList(key)
        # console.log _map
        _mapStr = JSON.stringify _map, null, 2
        fs.writeFileSync _spriteMap, _mapStr, 'utf8'
        gutil.log '\'' + color.cyan('spmap.json') + '\'','build success.'


    # 获取目录下的雪碧图队列
    getSpSrcList: (folder)->
        _list = []
        _pngsPath = path.join(@srcPath, folder)
        fs.readdirSync(_pngsPath).forEach (file)->
            pngFile = path.join(_pngsPath, file)
            if file.indexOf('.') != 0 and file.indexOf('.png') != -1 and fs.statSync(pngFile)
                _list.push file
        return _list

    ###*
    * 返回雪碧图的生成算法 共三个：
    * 默认 binary-tree
    * 目录名的最后包含'_y'，即为Y轴，则为top-down
    * 目录名的最后包含'_x'，即为X轴，则为left-right
    ###
    getBuildMethod: (folder)->
        method = switch
                when (/_x$/).test(folder) then 'left-right'
                when (/_y$/).test(folder) then 'top-down'
                else 'binary-tree'
        return method


module.exports = spCtl
