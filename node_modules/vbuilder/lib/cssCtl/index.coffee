###*
* @fileOverview 将CSS的debug文件push到生产目录，并将引用到的背景图片自动添加hash后缀
* 
* @author pjg <iampjg@gmail.com>
* @link http://pjg.pw
* @version $Id$
###

fs      = require 'fs'
path    = require 'path'
_       = require 'lodash'
crypto  = require 'crypto'
vfs     = require 'vinyl-fs'
gutil   = require 'gulp-util'
less    = require 'gulp-less'
mincss  = require 'gulp-minify-css'
# sourcemaps = require 'gulp-sourcemaps'
autoprefixer = require 'gulp-autoprefixer'
plumber = require 'gulp-plumber'
color   = gutil.colors
Utils   = require '../utils'
ImgCtl  = require '../imgCtl'

    
class CssCtl
    # 参数初始化
    constructor:(@opts)->
        @root = @opts.root
        @hashLen = @opts.hashLen

        @srcPath = @opts.srcPath
        @debugPath = @opts.debugPath
        @distPath = @opts.distPath

        @lessPath = @srcPath + 'less'
        @cssDebugPath = @debugPath + 'css'

        @imgDistPath = @distPath + 'img'
        @cssDistPath = @distPath + 'css'


        @env = @opts.env
        @isDebug = @opts.isDebug


    # 替换背景图片，带上md5版本戳
    _replaceImgPaths: (source)->
        _this = @
        Utils.getMap('imgMap') if _.has(global.Cache,'imgMap')
        _cssBgMap = global.Cache['imgMap']
        # console.log _cssBgMap
        _sPath = source.path
        _sPath = Utils.tranFilePath _sPath
        _type = if _sPath.indexOf('/less/') isnt -1 then 'less' else 'css'
        _sPath = _sPath.split("/#{_type}/")[1]
                       .replace(/\\/g,'/')

        # 计算CSS文件的目录深度                   
        _pathDeeps = ''
        _temArr = _sPath.split('/')
        for i,k in _temArr
            _pathDeeps += '../'

        # 文件相对路径的对象
        _nameObj = path.parse(_sPath)
        _nameObj.hash = Utils.md5(source.contents)

        # 替换CSS中的背景图片，加上md5版本戳
        _cssBgReg = /url\s*\(([^\)]+)\)/g
        _source = String(source.contents).replace _cssBgReg, (str,map)->
            # 过滤一些标签
            if map.indexOf('fonts/') isnt -1 or map.indexOf('font/') isnt -1 or map.indexOf('#') isnt -1 or map.indexOf('//:') isnt -1 or map.indexOf('about:') isnt -1 or map.indexOf('data:') isnt -1
                return str
            else
                key = map.split('/img/')[1]
                         .replace(/(^\'|\")|(\'|\"$)/g, '')
                val = _pathDeeps + "img/"
                if _type is 'less'
                    val += key
                else
                    val += if _.has(_cssBgMap,key) then _cssBgMap[key].distname else  key + '?t=' + String(new Date().getTime()).substr(0,8)
                # console.log str.replace(map, val)
                return str.replace(map, val)
        return _source
    # 替换css的背景图片，加上hash
    _stream: (files,cb,cb2)->
        _this = @
        vfs.src files
            .pipe plumber({errorHandler: Utils.errrHandler})
            .pipe mincss({
                    keepBreaks:false
                    compatibility:
                        properties:
                            iePrefixHack:true
                            ieSuffixHack:true
                })
            .on 'data',(source)->
                _path = Utils.tranFilePath source.path
                _path = _path.split('/css/')[1]
                                   .replace(/\\/g,'/')
                # 文件相对路径的对象
                _nameObj = path.parse(_path)
                _nameObj.hash = Utils.md5(source.contents)
                # 替换CSS背景图片,带上版本
                _source = _this._replaceImgPaths(source)
                cb(_nameObj,_source )
            .on 'end',cb2


    ###*
     * 从less生成css源码
    ###
    less2css: (cb,offLog)->
        _this = @
        _cb = cb or ->
        _files = [
            path.join(@lessPath, '*.less')
            path.join(@lessPath, '**/*.less')
            "!#{path.join(@lessPath, '_*.less')}"
            "!#{path.join(@lessPath, '_**/*.less')}"
            "!#{path.join(@lessPath, '_**/**/*.less')}"
            "!#{path.join(@lessPath, '_**/**/**/*.less')}"
        ]
        _offLog = offLog or true
        _lessPath = _this.lessPath
        _cssDistPath = _this.cssDebugPath
        vfs.src(_files)
            .pipe plumber({errorHandler: Utils.errrHandler})
            .pipe less
                    compress: false
                    paths: [_lessPath]
            .pipe autoprefixer()
            .on 'data',(res)->
                # console.log res.path
                _path = Utils.tranFilePath res.path
                _fileName = _path.split('/less/')[1]
                                    .replace(/\\/g,'/')
                _filePath = path.join _cssDistPath,_fileName
                _LessName = _fileName.replace('.css','.less')
                _source = _this._replaceImgPaths(res)
                Utils.writeFile(_filePath,_source,!0)
                !_offLog and gutil.log '\'' + color.cyan(_LessName) + '\'','build success.'
            .on 'end',-> 
                _cb()
    ###
    # css生产文件构建函数
    # @param {string} file 同gulp.src接口所接收的参数，默认是css源文件的所有css文件
    # @param {function} done 回调函数
    ###
    css2dist: (file,done)->
        _this = @
        
        
        if not file
            _done = ->
            _file = [_this.cssDebugPath + '/*.css',_this.cssDebugPath + '/**/*.css']
        else if typeof file is 'function'
            _done = file
            _file = [_this.cssDebugPath + '/*.css',_this.cssDebugPath + '/**/*.css']
        else
            _file = file
            _done = done
        # 读取缓存
        Utils.getMap("cssMap") if not _.has(global.Cache,'cssMap')
        cssMap = global.Cache['cssMap']

        _hashLen = _this.hashLen
        # console.log _file
        _this._stream(
            _file
            (obj,source)->
                _source = source
                _distPath = obj.dir + '/' + obj.name + '.' + obj.hash.substr(0,_hashLen) + obj.ext
                _distPath2 = obj.dir + '/' + obj.name + obj.ext
                cssMap[_distPath2.replace(/^\//,'')] = 
                    hash : obj.hash
                    distname : _distPath.replace(/^\//,'')
                    
                _filePath = path.join(_this.root, _this.cssDistPath, _distPath)
                _filePath2 = path.join(_this.root, _this.cssDistPath, _distPath2)

                if not fs.existsSync(_filePath)
                    Utils.writeFile(_filePath,_source)
                    Utils.writeFile(_filePath2,_source,!0)
            ->
                Utils.updateMap(cssMap,'cssMap')
                Utils.saveMapFile('cssMap')

                _done()
        )
    init: (cb)->
        gutil.log 'Starting','\'' + color.cyan('LESS-->CSS') + '\'...'
        _this = @
        _this.less2css ->
            gutil.log '\'' + color.cyan('LESS') + '\'','build success.'
            if _this.env isnt 'local' and _this.env isnt 'dev'
                _this.css2dist ->
                    gutil.log '\'' + color.cyan('CSS') + '\'','build success.'
                    cb and cb()
            else
                if _this.isDebug and _this.env is 'local'
                    _this.css2dist ->
                    gutil.log '\'' + color.cyan('CSS') + '\'','build success.'
                    cb and cb()
                else   
                    cb and cb()
    

module.exports = CssCtl