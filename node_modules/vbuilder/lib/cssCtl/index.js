// Generated by CoffeeScript 1.9.3

/**
* @fileOverview 将CSS的debug文件push到生产目录，并将引用到的背景图片自动添加hash后缀
* 
* @author pjg <iampjg@gmail.com>
* @link http://pjg.pw
* @version $Id$
 */
var CssCtl, ImgCtl, Utils, _, autoprefixer, color, crypto, fs, gutil, less, mincss, path, plumber, vfs;

fs = require('fs');

path = require('path');

_ = require('lodash');

crypto = require('crypto');

vfs = require('vinyl-fs');

gutil = require('gulp-util');

less = require('gulp-less');

mincss = require('gulp-minify-css');

autoprefixer = require('gulp-autoprefixer');

plumber = require('gulp-plumber');

color = gutil.colors;

Utils = require('../utils');

ImgCtl = require('../imgCtl');

CssCtl = (function() {
  function CssCtl(opts) {
    this.opts = opts;
    this.root = this.opts.root;
    this.hashLen = this.opts.hashLen;
    this.srcPath = this.opts.srcPath;
    this.debugPath = this.opts.debugPath;
    this.distPath = this.opts.distPath;
    this.lessPath = this.srcPath + 'less';
    this.cssDebugPath = this.debugPath + 'css';
    this.imgDistPath = this.distPath + 'img';
    this.cssDistPath = this.distPath + 'css';
    this.env = this.opts.env;
    this.isDebug = this.opts.isDebug;
  }

  CssCtl.prototype._replaceImgPaths = function(source) {
    var _cssBgMap, _cssBgReg, _nameObj, _pathDeeps, _sPath, _source, _temArr, _this, _type, i, j, k, len;
    _this = this;
    if (_.has(global.Cache, 'imgMap')) {
      Utils.getMap('imgMap');
    }
    _cssBgMap = global.Cache['imgMap'];
    _sPath = source.path;
    _sPath = Utils.tranFilePath(_sPath);
    _type = _sPath.indexOf('/less/') !== -1 ? 'less' : 'css';
    _sPath = _sPath.split("/" + _type + "/")[1].replace(/\\/g, '/');
    _pathDeeps = '';
    _temArr = _sPath.split('/');
    for (k = j = 0, len = _temArr.length; j < len; k = ++j) {
      i = _temArr[k];
      _pathDeeps += '../';
    }
    _nameObj = path.parse(_sPath);
    _nameObj.hash = Utils.md5(source.contents);
    _cssBgReg = /url\s*\(([^\)]+)\)/g;
    _source = String(source.contents).replace(_cssBgReg, function(str, map) {
      var key, val;
      if (map.indexOf('fonts/') !== -1 || map.indexOf('font/') !== -1 || map.indexOf('#') !== -1 || map.indexOf('//:') !== -1 || map.indexOf('about:') !== -1 || map.indexOf('data:') !== -1) {
        return str;
      } else {
        key = map.split('/img/')[1].replace(/(^\'|\")|(\'|\"$)/g, '');
        val = _pathDeeps + "img/";
        if (_type === 'less') {
          val += key;
        } else {
          val += _.has(_cssBgMap, key) ? _cssBgMap[key].distname : key + '?t=' + String(new Date().getTime()).substr(0, 8);
        }
        return str.replace(map, val);
      }
    });
    return _source;
  };

  CssCtl.prototype._stream = function(files, cb, cb2) {
    var _this;
    _this = this;
    return vfs.src(files).pipe(plumber({
      errorHandler: Utils.errrHandler
    })).pipe(mincss({
      keepBreaks: false,
      compatibility: {
        properties: {
          iePrefixHack: true,
          ieSuffixHack: true
        }
      }
    })).on('data', function(source) {
      var _nameObj, _path, _source;
      _path = Utils.tranFilePath(source.path);
      _path = _path.split('/css/')[1].replace(/\\/g, '/');
      _nameObj = path.parse(_path);
      _nameObj.hash = Utils.md5(source.contents);
      _source = _this._replaceImgPaths(source);
      return cb(_nameObj, _source);
    }).on('end', cb2);
  };


  /**
   * 从less生成css源码
   */

  CssCtl.prototype.less2css = function(cb, offLog) {
    var _cb, _cssDistPath, _files, _lessPath, _offLog, _this;
    _this = this;
    _cb = cb || function() {};
    _files = [path.join(this.lessPath, '*.less'), path.join(this.lessPath, '**/*.less'), "!" + (path.join(this.lessPath, '_*.less')), "!" + (path.join(this.lessPath, '_**/*.less')), "!" + (path.join(this.lessPath, '_**/**/*.less')), "!" + (path.join(this.lessPath, '_**/**/**/*.less'))];
    _offLog = offLog || true;
    _lessPath = _this.lessPath;
    _cssDistPath = _this.cssDebugPath;
    return vfs.src(_files).pipe(plumber({
      errorHandler: Utils.errrHandler
    })).pipe(less({
      compress: false,
      paths: [_lessPath]
    })).pipe(autoprefixer()).on('data', function(res) {
      var _LessName, _fileName, _filePath, _path, _source;
      _path = Utils.tranFilePath(res.path);
      _fileName = _path.split('/less/')[1].replace(/\\/g, '/');
      _filePath = path.join(_cssDistPath, _fileName);
      _LessName = _fileName.replace('.css', '.less');
      _source = _this._replaceImgPaths(res);
      Utils.writeFile(_filePath, _source, !0);
      return !_offLog && gutil.log('\'' + color.cyan(_LessName) + '\'', 'build success.');
    }).on('end', function() {
      return _cb();
    });
  };


  /*
   * css生产文件构建函数
   * @param {string} file 同gulp.src接口所接收的参数，默认是css源文件的所有css文件
   * @param {function} done 回调函数
   */

  CssCtl.prototype.css2dist = function(file, done) {
    var _done, _file, _hashLen, _this, cssMap;
    _this = this;
    if (!file) {
      _done = function() {};
      _file = [_this.cssDebugPath + '/*.css', _this.cssDebugPath + '/**/*.css'];
    } else if (typeof file === 'function') {
      _done = file;
      _file = [_this.cssDebugPath + '/*.css', _this.cssDebugPath + '/**/*.css'];
    } else {
      _file = file;
      _done = done;
    }
    if (!_.has(global.Cache, 'cssMap')) {
      Utils.getMap("cssMap");
    }
    cssMap = global.Cache['cssMap'];
    _hashLen = _this.hashLen;
    return _this._stream(_file, function(obj, source) {
      var _distPath, _distPath2, _filePath, _filePath2, _source;
      _source = source;
      _distPath = obj.dir + '/' + obj.name + '.' + obj.hash.substr(0, _hashLen) + obj.ext;
      _distPath2 = obj.dir + '/' + obj.name + obj.ext;
      cssMap[_distPath2.replace(/^\//, '')] = {
        hash: obj.hash,
        distname: _distPath.replace(/^\//, '')
      };
      _filePath = path.join(_this.root, _this.cssDistPath, _distPath);
      _filePath2 = path.join(_this.root, _this.cssDistPath, _distPath2);
      if (!fs.existsSync(_filePath)) {
        Utils.writeFile(_filePath, _source);
        return Utils.writeFile(_filePath2, _source, !0);
      }
    }, function() {
      Utils.updateMap(cssMap, 'cssMap');
      Utils.saveMapFile('cssMap');
      return _done();
    });
  };

  CssCtl.prototype.init = function(cb) {
    var _this;
    gutil.log('Starting', '\'' + color.cyan('LESS-->CSS') + '\'...');
    _this = this;
    return _this.less2css(function() {
      gutil.log('\'' + color.cyan('LESS') + '\'', 'build success.');
      if (_this.env !== 'local' && _this.env !== 'dev') {
        return _this.css2dist(function() {
          gutil.log('\'' + color.cyan('CSS') + '\'', 'build success.');
          return cb && cb();
        });
      } else {
        if (_this.isDebug && _this.env === 'local') {
          _this.css2dist(function() {});
          gutil.log('\'' + color.cyan('CSS') + '\'', 'build success.');
          return cb && cb();
        } else {
          return cb && cb();
        }
      }
    });
  };

  return CssCtl;

})();

module.exports = CssCtl;
