// Generated by CoffeeScript 1.9.3

/**
* html模板构建和压缩模块
 */
var HtmlCtl, Utils, _, color, fs, gutil, include, path, plumber, vfs,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

fs = require('fs');

path = require('path');

_ = require('lodash');

vfs = require('vinyl-fs');

gutil = require('gulp-util');

plumber = require('gulp-plumber');

color = gutil.colors;

Utils = require('../utils');

include = require('./include');

HtmlCtl = (function() {
  function HtmlCtl(opts1) {
    this.opts = opts1;
    this.init = bind(this.init, this);
    this.combine = bind(this.combine, this);
    this.htmlSrcPath = path.join(this.opts.srcPath, 'html/');
    this.htmlDebugPath = path.join(this.opts.debugPath, 'html/');
    this.htmlDistPath = this.opts.viewPath;
    this.env = this.opts.env;
    this.isDebug = this.opts.isDebug;
    this.include = "@@include";
  }

  HtmlCtl.prototype._buildHtml = function(data) {
    var _debugPath, _distPath, _name, _path, _source, _this, e;
    _this = this;
    try {
      _path = String(data.path).replace(/\\/g, '/');
      if (_path.indexOf("/_") > -1) {
        return false;
      }
      _name = _path.split("/html/")[1];
      _debugPath = _this.htmlDebugPath + _name;
      _distPath = _this.htmlDistPath + _name;
      _source = Utils.replaceImg(String(data.contents));
      if (_this.env === 'local') {
        Utils.writeFile(_debugPath, _source, !0);
      } else {
        _source = Utils.htmlMinify(_source);
      }
      Utils.writeFile(_distPath, _source, !0);
      if (_this.env !== 'local' && _this.env !== 'dev') {
        return gutil.log("'" + color.cyan("" + _name) + "'", "combined.");
      }
    } catch (_error) {
      e = _error;
    }
  };

  HtmlCtl.prototype.combine = function(cb) {
    var _cb, _files, _this, opts;
    _this = this;
    _files = [path.join(this.htmlSrcPath, '*.html'), path.join(this.htmlSrcPath, '**/*.html'), path.join(this.htmlSrcPath, '**/**/*.html')];
    _cb = cb || function() {};
    gutil.log(color.yellow("Combine html templates..."));
    opts = {
      baseDir: _this.htmlSrcPath,
      staticPath: Utils.getStaticPath(),
      init_css: Utils.init_css,
      init_js: Utils.init_js,
      init_img: Utils.init_img,
      ignore: /\/_\w*\//g,
      ejs: {
        delimiter: "@"
      }
    };
    return vfs.src(_files).pipe(plumber({
      errorHandler: Utils.errrHandler
    })).pipe(include(opts)).on("data", function(res) {
      return _this._buildHtml(res);
    }).on("end", function() {
      gutil.log(color.green("Html templates done!"));
      return _cb();
    });
  };

  HtmlCtl.prototype.init = function(cb) {
    var _cb;
    _cb = cb || function() {};
    return this.combine(function() {
      return _cb();
    });
  };

  return HtmlCtl;

})();

module.exports = HtmlCtl;
