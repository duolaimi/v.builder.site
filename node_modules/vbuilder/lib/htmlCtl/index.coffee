###*
* html模板构建和压缩模块
###

fs      = require 'fs'
path    = require 'path'
_       = require 'lodash'
vfs     = require 'vinyl-fs'
gutil   = require 'gulp-util'
plumber = require 'gulp-plumber'
color   = gutil.colors
Utils   = require '../utils'
include = require './include'

class HtmlCtl

    constructor:(@opts)->
        @htmlSrcPath = path.join @opts.srcPath , 'html/'
        @htmlDebugPath = path.join @opts.debugPath , 'html/'
        @htmlDistPath = @opts.viewPath
        @env = @opts.env
        @isDebug = @opts.isDebug
        @include = "@@include"

    # 构建html模板
    _buildHtml: (data)->
        _this = @
        try
            _path = String(data.path).replace(/\\/g,'/')
            # console.log _path
            return false if _path.indexOf("/_") > -1 
            _name = _path.split("/html/")[1]
            
            _debugPath = _this.htmlDebugPath + _name
            _distPath = _this.htmlDistPath + _name
            
            # 给html中的图片链接加上Hash
            _source = Utils.replaceImg(String(data.contents))

            if _this.env is 'local'
                Utils.writeFile(_debugPath,_source,!0)
            else
                # 如果不是开发环境，则压缩html
                _source = Utils.htmlMinify(_source)
                
            Utils.writeFile(_distPath,_source,!0)
            if _this.env isnt 'local' and _this.env isnt 'dev'
                gutil.log "'" + color.cyan("#{_name}") + "'","combined."
            
        catch e
            # console.log e

    combine: (cb)=>
        
        _this = @
        _files = [
            path.join(@htmlSrcPath, '*.html')
            path.join(@htmlSrcPath, '**/*.html')
            path.join(@htmlSrcPath, '**/**/*.html')
        ]
        _cb = cb or ->

        gutil.log color.yellow "Combine html templates..."
        
        # html模板引擎配置
        opts = 
            baseDir: _this.htmlSrcPath
            staticPath: Utils.getStaticPath()
            init_css: Utils.init_css
            init_js: Utils.init_js
            init_img: Utils.init_img
            ignore: /\/_\w*\//g  # 过滤带下划线开头命名的目录
            ejs: 
                delimiter: "@"

        vfs.src(_files)
            .pipe plumber({errorHandler: Utils.errrHandler})
            .pipe include(opts)
            .on "data",(res)->
                _this._buildHtml(res)
            .on "end",->
                gutil.log color.green "Html templates done!"
                _cb()

    init: (cb)=>
        _cb = cb or ->
        @combine ->
            _cb()

module.exports = HtmlCtl