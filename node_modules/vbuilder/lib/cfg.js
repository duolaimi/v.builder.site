var Utils, args, cfgFile, config, fs, key, path, setting, val, _, _cdn, _cdnDomain, _env, _host, _isDebug, _mod, _port, _ref, _root, _ver, _view;

fs = require('fs');

path = require('path');

_ = require('lodash');

args = require('yargs').argv;

cfgFile = global.Cache['cfgFile'] || path.join(__dirname, '../config.json');

config = require(cfgFile);

Utils = require('./utils');

_root = process.cwd() + '/';

_isDebug = args.d || args.debug || false;

_env = args.e || args.env || "local";

_cdn = args.c || args.cdn || config.cdnDomain;

_ver = args.v || args.ver || config.version;

_host = args.h || args.host || config.host;

_port = args.p || args.port || config.port;

_mod = args.m || args.mod;

_view = args.view || config.view;

if (config.cdnDomain !== _cdn) {
  config.cdnDomain = _cdn;
}

if (config.version !== _ver) {
  config.version = _ver;
}

if (config.host !== _host) {
  config.host = _host;
}

if (config.port !== _port) {
  config.port = _port;
}

if (_mod) {
  config.coreJs.mods = _mod.split(',');
}

if (_view) {
  config.view = _view;
}

fs.writeFileSync(cfgFile, JSON.stringify(config, null, 4), 'utf8');

if (_env === 'www') {
  _cdnDomain = _cdn;
} else {
  _cdnDomain = _env + '.' + _cdn;
}

setting = {
  root: _root,
  env: _env,
  ver: _ver,
  isDebug: _isDebug,
  coreJs: config.coreJs,
  prefix: config.prefix,
  hashLen: config.hashLen,
  viewPath: config.viewPath,
  cdnDomain: '//' + _cdnDomain + '/',
  host: _host,
  port: _port,
  fontExt: config.fontExt || [],
  openBrower: config.openBrower
};

setting['paths'] = {};

_ref = config.paths;
for (key in _ref) {
  val = _ref[key];
  setting['paths'][key] = val + '/';
}

global.Cache = global.Cache || (global.Cache = {});

(function() {
  var _Cfg, _ref1;
  _Cfg = setting;
  _ref1 = _Cfg.paths;
  for (key in _ref1) {
    val = _ref1[key];
    _Cfg["" + key + "Path"] = val;
  }
  return global.Cache['gOpts'] = _Cfg;
})();

module.exports = setting;
